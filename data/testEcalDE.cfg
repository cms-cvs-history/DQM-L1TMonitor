
process ecalde = {

    include "FWCore/MessageLogger/data/MessageLogger.cfi"
    
    untracked PSet maxEvents = { untracked int32 input = 10000 }
    
    path p = {
	l1dummy
	,l1bias 
	,l1compare
	,l1demon
	,l1demonecal
    }
    
    source = EmptySource {}

    #generate dummy digis (e-digis)
    include "L1Trigger/HardwareValidation/data/L1DummyProducer.cfi"
    replace l1dummy.VerboseFlag = 0 

    #introduce bias (d-digis)
    include "L1Trigger/HardwareValidation/data/L1EmulBias.cfi"
    replace l1bias.VerboseFlag = 0 
    replace l1bias.ETPsource = l1dummy
    
    #d|e comparison
    include "L1Trigger/HardwareValidation/data/L1Comparator.cfi"
    replace l1compare.DumpMode = 1
    replace l1compare.VerboseFlag = 0
    replace l1compare.ETPsourceEmul = l1dummy
    replace l1compare.ETPsourceData = l1bias

    #select subsystems to be studied
    replace l1dummy.DO_SYSTEM       = { 1,0,0,0,0,0,0,0,0,0,0,0 }
    replace l1bias.DO_SYSTEM        = { 1,0,0,0,0,0,0,0,0,0,0,0 }
    replace l1compare.COMPARE_COLLS = { 1,0,0,0,0,0,0,0,0,0,0,0 }
    
    #produce general de-dqm sources
    include "DQM/L1TMonitor/data/L1TDEMON.cfi"
    replace l1demon.VerboseFlag = 0

    #produce ecal specific de-dqm sources
    include "DQM/L1TMonitor/data/L1TdeECAL.cfi"

    # services
    service =  RandomNumberGeneratorService { PSet moduleSeeds = {
	    untracked uint32 l1dummy = 1762349
	    untracked uint32 l1bias  = 7863453
    }}
    service = ModuleWebRegistry{ }
    service = DaqMonitorROOTBackEnd{}
    service = LockService{untracked vstring labels = {"source"}}
    service = MonitorDaemon {
	untracked   bool AutoInstantiate    = false
	untracked  int32 reconnect_delay    = 5
	untracked string DestinationAddress = "cmsdaquser0.cern.ch"
	untracked  int32 SendPort           = 9090
	untracked  int32 UpdateDelay        = 10000
	untracked string NameAsSource       = "GlobalDQM"
    }
    
    module outputEvents = PoolOutputModule {
    	untracked string fileName = "ecaltest.root"
        untracked vstring outputCommands = {"keep *"}
    }
    endpath outpath = { outputEvents }
    
}
